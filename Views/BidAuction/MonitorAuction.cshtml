@model AuctionDetailsViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitor Auction - @Model.Auction.Title</title>
    <!-- Flowbite CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>

    <!-- Toastify CSS and JS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <style>
        :root {
            --primary: #2563eb;
            --primary-light: #3b82f6;
            --primary-dark: #1d4ed8;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --purple: #7e22ce;
        }
        
        body {
            background-color: #f9fafb;
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
        }
        
        .bid-card {
            transition: all 0.3s ease;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .bid-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        
        .auction-timer {
            font-family: 'Courier New', monospace;
            font-weight: bold;
        }
        
        .new-bid-highlight {
            animation: highlight 3s ease;
        }
        
        
        
        .bid-amount {
            font-weight: bold;
            color: var(--primary-dark);
        }
        
        .auction-image {
            max-height: 300px;
            object-fit: contain;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        .status-badge-pending {
            background-color: var(--warning);
        }
        
        .status-badge-accepted {
            background-color: var(--success);
        }
        
        .status-badge-rejected {
            background-color: var(--danger);
        }
        
        .countdown-item {
            background: rgba(37, 99, 235, 0.1);
            border-radius: 0.5rem;
            padding: 0.5rem;
            min-width: 60px;
            text-align: center;
        }
        
        .countdown-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-dark);
        }
        
        .countdown-label {
            font-size: 0.75rem;
            color: var(--primary);
        }
        
        .auction-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border-radius: 0.75rem;
            padding: 1.5rem;
            color: white;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        .info-card {
            background: white;
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid rgba(229, 231, 235, 0.5);
        }
        
        .info-card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        
        .back-button {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
            backdrop-filter: blur(4px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .back-button:hover {
            background-color: rgba(255, 255, 255, 0.3);
            transform: translateX(-5px);
        }
    </style>
</head>
<body>
    
    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <!-- Auction Header -->
        <div class="auction-header mb-6">
            <!-- Back Button -->
            <a asp-action="BidderAuctionDetails" asp-controller="BidAuction" asp-route-id="@Model.Auction.EncId" class="back-button">
                <i class="fas fa-arrow-left mr-2"></i> 
            </a>


            
            <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-4">
                <div>
                    <h1 class="text-3xl font-bold text-white">@Model.Auction.Title</h1>
                    <p class="text-white/80 mt-2">@Model.Auction.AuctionDescription</p>

                </div>
                
                <div class="mt-4 md:mt-0 flex flex-col items-end">
                    <div class="bg-white/20 text-white text-sm font-medium px-3 py-1 rounded-full mb-2 backdrop-blur-sm">
                        <i class="fas fa-tag mr-1"></i> @Model.Auction.AuctionType
                    </div>
                    <div class="bg-white/20 text-white text-sm font-medium px-3 py-1 rounded-full backdrop-blur-sm">
                        <i class="fas fa-gavel mr-1"></i> Status: @Model.Auction.AuctionStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <!-- Auction Image -->
            <div class="info-card">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    <i class="fas fa-image mr-2 text-blue-600"></i> Item Image
                </h3>
                @if (!string.IsNullOrEmpty(Model.Auction.ItemImage))
                {
                    <img src="~/AuctionImage/@Model.Auction.ItemImage" alt="@Model.Auction.Title" class="auction-image w-full">
                }
                else
                {
                    <div class="bg-gray-200 rounded-lg flex items-center justify-center h-64 w-full">
                        <i class="fas fa-image text-gray-400 text-6xl"></i>
                    </div>
                }
            </div>
            
            <!-- Auction Schedule -->
            <div class="info-card">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    <i class="fas fa-calendar-alt mr-2 text-blue-600"></i> Auction Schedule
                </h3>
                <div class="flex justify-between mb-3 border-b pb-2">
                    <span class="text-gray-600">Start:</span>
                    <span class="font-medium">@Model.Auction.StartDate.ToString("MMM d, yyyy") at @Model.Auction.StartTime</span>
                </div>
                <div class="flex justify-between mb-4 border-b pb-2">
                    <span class="text-gray-600">End:</span>
                    <span class="font-medium">@Model.Auction.EndDate.ToString("MMM d, yyyy") at @Model.Auction.EndTime</span>
                </div>
                
                <div class="mt-4">
                    <div class="text-sm text-gray-500 mb-2 text-center">Time Remaining</div>
                    <div id="auctionTimer" class="auction-timer flex justify-center space-x-2">
                        <div class="countdown-item">
                            <div class="countdown-value" id="days">--</div>
                            <div class="countdown-label">Days</div>
                        </div>
                        <div class="countdown-item">
                            <div class="countdown-value" id="hours">--</div>
                            <div class="countdown-label">Hours</div>
                        </div>
                        <div class="countdown-item">
                            <div class="countdown-value" id="minutes">--</div>
                            <div class="countdown-label">Mins</div>
                        </div>
                        <div class="countdown-item">
                            <div class="countdown-value" id="seconds">--</div>
                            <div class="countdown-label">Secs</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Bid Information -->
            <div class="info-card">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    <i class="fas fa-rupee-sign mr-2 text-green-600"></i> Bid Information
                </h3>
                <div class="flex justify-between mb-3 border-b pb-2">
                    <span class="text-gray-600">Starting Price:</span>
                    <span class="font-medium">₹@Model.Auction.StartingPrice.ToString("N2")</span>
                </div>
                <div class="flex justify-between mb-3 border-b pb-2">
                    <span class="text-gray-600">Current Highest:</span>
                    <span id="highestBid" class="font-bold text-blue-600">
                        @if (Model.AuctionBid != null && Model.AuctionBid.Any())
                        {
                            <text>₹@Model.HighestBidAmount.ToString("N2")</text>
                        }
                        else
                        {
                            <text>Starting Price: ₹@Model.Auction.StartingPrice.ToString("N2")</text>
                        }
                    </span>
                </div>
                <div class="flex justify-between mb-4 border-b pb-2">
                    <span class="text-gray-600">Total Bids:</span>
                    <span id="totalBids" class="font-medium">@(Model.AuctionBid != null ? Model.AuctionBid.Count : 0)</span>
                </div>

                <div class="mt-4">
                    <form asp-action="PlaceBid" method="post" class="flex">

                        <input type="hidden" name="auctionId" value="@Model.Auction.AuctionId" />
                        <input type="number" name="bidAmount" class="block w-full rounded-l-lg border border-gray-300 bg-gray-50 p-2.5 text-gray-900 focus:border-blue-500 focus:ring-blue-500"
                               min="@Model.MinBidAmount" 
                               placeholder="Enter your bid" required />
                        <button type="submit" class="inline-flex items-center rounded-r-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300">
                            <i class="fas fa-gavel mr-2"></i> Bid Now
                        </button>
                    </form>
                </div>
            </div>
        </div>
        
        <!-- Bid History -->
        <div class="info-card">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-gray-900">
                    <i class="fas fa-history mr-2 text-blue-600"></i> Bid History
                </h2>
               
            </div>
            
            <div class="overflow-x-auto relative">
                <table class="w-full text-sm text-left text-gray-500">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-100 rounded-t-lg">
                        <tr>
                            <th scope="col" class="py-3 px-6">Bidder</th>
                            <th scope="col" class="py-3 px-6">Bid Amount</th>
                            <th scope="col" class="py-3 px-6">Date & Time</th>
                            <th scope="col" class="py-3 px-6">Status</th>
                            <th scope="col" class="py-3 px-6">Bidding Details</th>
                        </tr>
                    </thead>
                    <tbody id="bidHistory">
                        @foreach (var bid in Model.AuctionBid)
                        {
                            <tr class="bg-white border-b hover:bg-gray-50 transition-colors duration-200">
                                <td class="py-4 px-6 font-medium text-gray-900">
                                    @if (bid.BidderName != null && bid.BidderName.Any())
                                    {
                                        var user = bid.BidderName.First();
                                        string fullName = $"{user.FirstName} {(string.IsNullOrEmpty(user.MiddleName) ? "" : user.MiddleName + " ")}{user.LastName}";
                                        <div class="flex items-center">
                                            <div class="h-10 w-10 flex-shrink-0 mr-3 bg-blue-100 rounded-full flex items-center justify-center">
                                                <span class="text-blue-800 font-bold">@(string.IsNullOrEmpty(fullName) ? "?" : fullName[0].ToString().ToUpper())</span>
                                            </div>
                                            <div>
                                                <div class="font-medium text-gray-900">@fullName</div>
                                                <div class="text-xs text-gray-500">ID: @bid.BidderId</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="flex items-center">
                                            <div class="h-10 w-10 flex-shrink-0 mr-3 bg-gray-100 rounded-full flex items-center justify-center">
                                                <span class="text-gray-500 font-bold">?</span>
                                            </div>
                                            <div>
                                                <div class="font-medium text-gray-900">Unknown</div>
                                                <div class="text-xs text-gray-500">ID: @bid.BidderId</div>
                                            </div>
                                        </div>
                                    }
                                </td>
                                <td class="py-4 px-6 bid-amount">₹@bid.BidAmount.ToString("N2")</td>
                                <td class="py-4 px-6">
                                    <div class="text-gray-900">@bid.BidDate.ToString("MMM d, yyyy")</div>
                                    <div class="text-xs text-gray-500">@bid.BidTime</div>
                                </td>
                                <td class="py-4 px-6">
                                    @{
                                        string statusClass = bid.BidStatus.ToLower() == "pending" ? "status-badge-pending" : 
                                                             bid.BidStatus.ToLower() == "accepted" ? "status-badge-accepted" : 
                                                             "status-badge-rejected";
                                        string statusIcon = bid.BidStatus.ToLower() == "pending" ? "fa-clock" : 
                                                           bid.BidStatus.ToLower() == "accepted" ? "fa-check-circle" : 
                                                           "fa-times-circle";
                                    }
                                    <span class="@statusClass text-white text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full inline-flex items-center">
                                        <i class="fas @statusIcon mr-1"></i> @bid.BidStatus
                                    </span>
                                </td>
                                <td class="py-4 px-6">
                                    @if (bid.Bids != null && bid.Bids.Any())
                                    {
                                        <button type="button" data-dropdown-toggle="dropdown-@bid.BidId" class="text-blue-700 border border-blue-700 hover:bg-blue-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-xs px-3 py-1.5 text-center inline-flex items-center">
                                            <i class="fas fa-list-ul mr-1"></i> View @bid.Bids.Count Bids
                                        </button>
                                        <div id="dropdown-@bid.BidId" class="hidden z-10 w-auto bg-white rounded divide-y divide-gray-100 shadow">
                                            <ul class="py-1 text-sm text-gray-700" aria-labelledby="dropdownDefault">
                                                @foreach (var bidding in bid.Bids)
                                                {
                                                    <li class="py-2 px-4 hover:bg-gray-100">
                                                        <div class="flex justify-between">
                                                            <span>Bid ID: @bidding.BiddingId</span>
                                                            <span class="font-medium text-blue-600">₹@bidding.BiddingAmount.ToString("N2")</span>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400 italic text-sm">No additional bids</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            @if (Model.AuctionBid == null || !Model.AuctionBid.Any())
            {
                <div class="text-center py-10">
                    <div class="text-gray-400 mb-3">
                        <i class="fas fa-gavel text-5xl"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-1">No Bids Yet</h3>
                    <p class="text-gray-500">Be the first to place a bid on this auction!</p>
                </div>
            }
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.js"></script>
    <script>

        

            // Update form submission handler
            document.addEventListener('DOMContentLoaded', function () {
                const bidForm = document.querySelector('form[asp-action="PlaceBid"]');
                if (bidForm) {
                    bidForm.addEventListener('submit', function (e) {
                        const bidAmount = document.querySelector('input[name="bidAmount"]').value;
                        const minBid = document.querySelector('input[name="bidAmount"]').min;

                        if (parseFloat(bidAmount) < parseFloat(minBid)) {
                            e.preventDefault();
                            showToast(`Bid amount must be at least ₹${minBid}`, false);
                            return;
                        }
                    });
                }
            });

        var connection = new signalR.HubConnectionBuilder().withUrl("/auctionHub").build();

        connection.start()
            .then(() => console.log("SignalR Connected"))
            .catch(err => console.error("SignalR Connection Error:", err));

        connection.on("ReceiveBid", function (auctionId, userId, bidAmount, bidTime) {
            console.log("New bid received:", { auctionId, userId, bidAmount, bidTime });
            // Format the bid time
            var formattedTime = new Date(bidTime).toLocaleString();

            // Find the row for the current user
            var existingRow = document.querySelector(`#bidHistory tr[data-user-id="${userId}"]`);

            // If the row exists, just update the bid amount
            if (existingRow) {
                existingRow.querySelector(".bid-amount").textContent = `₹${parseFloat(bidAmount).toFixed(2)}`;
            } else {
                // If the row doesn't exist, create a new row
                var newRow = `
                    <tr class="bg-white border-b hover:bg-gray-50" data-user-id="${userId}">
                        <td class="py-4 px-6 font-medium text-gray-900">
                            <div class="flex items-center">
                                <div class="h-10 w-10 flex-shrink-0 mr-3 bg-blue-100 rounded-full flex items-center justify-center">
                                    <span class="text-blue-800 font-bold">?</span>
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900">Unknown</div>
                                    <div class="text-xs text-gray-500">ID: ${userId}</div>
                                </div>
                            </div>
                        </td>
                        <td class="py-4 px-6 bid-amount">₹${parseFloat(bidAmount).toFixed(2)}</td>
                        <td class="py-4 px-6">
                            <div class="text-gray-900">${new Date(bidTime).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</div>
                            <div class="text-xs text-gray-500">${new Date(bidTime).toLocaleTimeString()}</div>
                        </td>
                        <td class="py-4 px-6">
                            <span class="status-badge-pending text-white text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full inline-flex items-center">
                                <i class="fas fa-clock mr-1"></i> Pending
                            </span>
                        </td>
                        <td class="py-4 px-6">
                            <span class="text-gray-400 italic text-sm">No additional bids</span>
                        </td>
                    </tr>`;

                // Insert the new row at the top of the table
                document.getElementById("bidHistory").insertAdjacentHTML("afterbegin", newRow);
            }

            // Update the highest bid amount in the UI for the current auction
            var highestBidElement = document.getElementById("highestBid");
            if (highestBidElement) {
                highestBidElement.textContent = `₹${parseFloat(bidAmount).toFixed(2)}`;
            }
            
            // Update total bids count
            var totalBidsElement = document.getElementById("totalBids");
            var currentTotal = parseInt(totalBidsElement.textContent);
            totalBidsElement.textContent = (currentTotal + 1).toString();
        });
        
        // Start the connection
        connection.start().catch(err => console.error(err.toString()));

        function updateCountdown() {
            const endDateStr = '@Model.Auction.EndDate.ToString("yyyy-MM-dd")' + 'T' + '@Model.Auction.EndTime.ToString("HH:mm:ss")';
            const endDate = new Date(endDateStr);

            // Get current time in Nepal timezone (UTC+5:45)
            const now = new Date();
            const nepalOffset = 345; // 5 hours and 45 minutes in minutes
            const localOffset = now.getTimezoneOffset();
            const totalOffset = nepalOffset + localOffset;

            // Adjust current time to Nepal time
            const nepalNow = new Date(now.getTime() + totalOffset * 60 * 1000);

            const timeRemaining = endDate - nepalNow;

            if (timeRemaining <= 0) {
                ['days', 'hours', 'minutes', 'seconds'].forEach(id => {
                    const el = document.getElementById(id);
                    if (el) el.textContent = '00';
                });

                // Reload after auction ends
                setTimeout(() => location.reload(), 3000);
                return;
            }

            const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

            // Ensure elements exist before updating
            const updateElement = (id, value) => {
                const el = document.getElementById(id);
                if (el) el.textContent = value.toString().padStart(2, '0');
            };

            updateElement('days', days);
            updateElement('hours', hours);
            updateElement('minutes', minutes);
            updateElement('seconds', seconds);
        }

        // Ensure countdown starts only if auction is active
        document.addEventListener('DOMContentLoaded', function () {
            if ('@Model.Auction.AuctionStatus.ToLower()' === 'active') {
                updateCountdown();
                setInterval(updateCountdown, 1000);
            }
        });

        // Update form submission handler
        document.addEventListener('DOMContentLoaded', function () {
            // Show toast messages from TempData
        @if (TempData["BidMessage"] != null)
        {
            <text>
                        showToast('@TempData["BidMessage"]', @(TempData["IsSuccess"]?.ToString()?.ToLower() ?? "false"));
            </text>
        }

        @if (TempData["ClosedMessage"] != null)
        {
            <text>
                        showToast('@TempData["ClosedMessage"]', false);
            </text>
        }

            const bidForm = document.querySelector('form[asp-action="PlaceBid"]');
            if (bidForm) {
                bidForm.addEventListener('submit', function (e) {
                    const bidAmount = document.querySelector('input[name="bidAmount"]').value;
                    const minBid = document.querySelector('input[name="bidAmount"]').min;

                    if (parseFloat(bidAmount) < parseFloat(minBid)) {
                        e.preventDefault();
                        showToast(`Bid amount must be at least ₹${minBid}`, false);
                        return;
                    }
                });
            }
        });

        function showToast(message, isSuccess = true) {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                stopOnFocus: true,
                style: {
                    background: isSuccess ? "linear-gradient(to right, #00b09b, #96c93d)" : "linear-gradient(to right, #ff5f6d, #ffc371)",
                }
            }).showToast();
        }
    </script>
</body>
</html>